*macos-spotify.txt*  Neovim Spotify controller for macOS

==============================================================================
CONTENTS                                                  *macos-spotify-contents*

    1. Introduction .......................... |macos-spotify-introduction|
    2. Requirements .......................... |macos-spotify-requirements|
    3. Installation .......................... |macos-spotify-installation|
    4. Commands .............................. |macos-spotify-commands|
    5. Configuration ......................... |macos-spotify-configuration|
    6. Lua API ............................... |macos-spotify-api|
    7. Keybindings ........................... |macos-spotify-keybindings|
    8. Troubleshooting ....................... |macos-spotify-troubleshooting|
    9. License ............................... |macos-spotify-license|

==============================================================================
INTRODUCTION                                          *macos-spotify-introduction*

macos-spotify.nvim is a Neovim plugin that allows you to control Spotify directly
from Neovim on macOS. It uses AppleScript through `osascript` to communicate
with the Spotify application.

Features:
  • Play/pause control
  • Track navigation (next/previous)
  • Volume control
  • Display current track information
  • Playback position control
  • Beautiful floating window displays
  • Customizable notifications

==============================================================================
REQUIREMENTS                                          *macos-spotify-requirements*

  • macOS (required - uses AppleScript)
  • Neovim 0.7 or later
  • Spotify application installed
  • Spotify must be running to use the plugin

==============================================================================
INSTALLATION                                          *macos-spotify-installation*

Using lazy.nvim: >lua
    {
      'yourusername/macos-spotify-nvim',
      config = function()
        require('macos-spotify').setup({
          notifications = true,
          notification_style = 'detailed',
          show_track_info = true,
        })
      end
    }
<

Using packer.nvim: >lua
    use {
      'yourusername/macos-spotify-nvim',
      config = function()
        require('macos-spotify').setup()
      end
    }
<

Using vim-plug: >vim
    Plug 'yourusername/macos-spotify-nvim'
<
Then in your init.lua: >lua
    require('macos-spotify').setup()
<

==============================================================================
COMMANDS                                                  *macos-spotify-commands*

                                                         *:SpotifyPlayPause*
:SpotifyPlayPause       Toggle play/pause state. If configured, shows a
                        notification with current track and state.

                                                              *:SpotifyNext*
:SpotifyNext            Skip to the next track. If configured, shows the
                        new track information.

                                                          *:SpotifyPrevious*
:SpotifyPrevious        Go to the previous track. If configured, shows the
                        new track information.

                                                        *:SpotifyShowTrack*
:SpotifyShowTrack       Display current track information in a beautiful
                        floating window. Shows track name, artist, album,
                        and playback position.

                                                            *:SpotifyStatus*
:SpotifyStatus          Show comprehensive player status including track
                        info, state, volume, and position.

                                                            *:SpotifyVolume*
:SpotifyVolume [level]  Get or set volume level.
                        Without argument: shows current volume
                        With argument (0-100): sets volume to that level
                        
                        Examples: >
                        :SpotifyVolume      " Show current volume
                        :SpotifyVolume 50   " Set volume to 50%
                        :SpotifyVolume 100  " Set volume to 100%
<

                                                              *:SpotifySeek*
:SpotifySeek {seconds}  Set playback position to specified number of seconds.
                        
                        Example: >
                        :SpotifySeek 30   " Jump to 30 seconds
<

                                                            *:SpotifyToggle*
:SpotifyToggle          Same as SpotifyPlayPause but explicitly designed to
                        show track info after toggling.

==============================================================================
CONFIGURATION                                        *macos-spotify-configuration*

Configure the plugin by calling the setup function with your preferences:

>lua
    require('macos-spotify').setup({
      -- Show notifications for actions (default: true)
      notifications = true,
      
      -- Notification style: 'minimal' or 'detailed' (default: 'detailed')
      notification_style = 'detailed',
      
      -- Show track info after play/pause/next/previous (default: true)
      show_track_info = true,
    })
<

Configuration Options:~

  `notifications` (boolean)
    Enable or disable all notifications.
    Default: true

  `notification_style` (string)
    Style of notifications. Options: 'minimal' or 'detailed'
    • 'minimal': Simple text notifications
    • 'detailed': Rich notifications with icons and formatting
    Default: 'detailed'

  `show_track_info` (boolean)
    Automatically show track information after actions like play/pause,
    next, or previous.
    Default: true

==============================================================================
LUA API                                                      *macos-spotify-api*

All commands are available as Lua functions for use in keybindings or custom
functions.

require('macos-spotify').setup({opts})                       *macos-spotify.setup()*
    Initialize the plugin with configuration options.
    See |macos-spotify-configuration| for available options.

require('macos-spotify').play_pause()                    *macos-spotify.play_pause()*
    Toggle play/pause state.
    Returns: boolean (success status)

require('macos-spotify').next_track()                    *macos-spotify.next_track()*
    Skip to next track.
    Returns: boolean (success status)

require('macos-spotify').previous_track()            *macos-spotify.previous_track()*
    Go to previous track.
    Returns: boolean (success status)

require('macos-spotify').show_current_track()    *macos-spotify.show_current_track()*
    Display current track information in a floating window.

require('macos-spotify').show_status()                  *macos-spotify.show_status()*
    Show comprehensive player status.

require('macos-spotify').volume(level)                      *macos-spotify.volume()*
    Get or set volume.
    Parameters:
      {level} (number|nil) - Volume level 0-100, nil to show current

require('macos-spotify').set_volume(level)              *macos-spotify.set_volume()*
    Set volume to specific level.
    Parameters:
      {level} (number) - Volume level 0-100
    Returns: boolean (success status)

require('macos-spotify').get_volume()                    *macos-spotify.get_volume()*
    Get current volume level.
    Returns: number|nil (volume level or nil if failed)

require('macos-spotify').set_position(seconds)        *macos-spotify.set_position()*
    Set playback position.
    Parameters:
      {seconds} (number) - Position in seconds
    Returns: boolean (success status)

require('macos-spotify').get_position()                *macos-spotify.get_position()*
    Get current playback position.
    Returns: number|nil (position in seconds or nil)

require('macos-spotify').get_current_track()        *macos-spotify.get_current_track()*
    Get current track information.
    Returns: table|nil with fields:
      {name} (string) - Track name
      {artist} (string) - Artist name
      {album} (string) - Album name
      {display} (string) - Formatted "Track - Artist"

require('macos-spotify').get_player_state()          *macos-spotify.get_player_state()*
    Get player state.
    Returns: table|nil with fields:
      {state} (string) - "playing" or "paused"
      {playing} (boolean) - true if playing
      {paused} (boolean) - true if paused

require('macos-spotify').get_duration()                *macos-spotify.get_duration()*
    Get track duration.
    Returns: number|nil (duration in milliseconds)

require('macos-spotify').get_status()                    *macos-spotify.get_status()*
    Get comprehensive status information.
    Returns: table|nil with complete status data

==============================================================================
KEYBINDINGS                                            *macos-spotify-keybindings*

The plugin does not set any default keybindings to avoid conflicts. Here are
some suggested keybindings you can add to your configuration:

>lua
    -- Using vim.keymap.set (Neovim 0.7+)
    local opts = { noremap = true, silent = true }
    
    vim.keymap.set('n', '<leader>sp', ':SpotifyPlayPause<CR>', 
      { desc = 'Spotify: Play/Pause', unpack(opts) })
    
    vim.keymap.set('n', '<leader>sn', ':SpotifyNext<CR>', 
      { desc = 'Spotify: Next Track', unpack(opts) })
    
    vim.keymap.set('n', '<leader>sb', ':SpotifyPrevious<CR>', 
      { desc = 'Spotify: Previous Track', unpack(opts) })
    
    vim.keymap.set('n', '<leader>ss', ':SpotifyShowTrack<CR>', 
      { desc = 'Spotify: Show Track', unpack(opts) })
    
    vim.keymap.set('n', '<leader>st', ':SpotifyStatus<CR>', 
      { desc = 'Spotify: Show Status', unpack(opts) })
<

Alternative keybindings using Lua functions directly:
>lua
    vim.keymap.set('n', '<leader>sp', function()
      require('macos-spotify').play_pause()
    end, { desc = 'Spotify: Play/Pause' })
    
    vim.keymap.set('n', '<leader>sn', function()
      require('macos-spotify').next_track()
    end, { desc = 'Spotify: Next Track' })
<

==============================================================================
TROUBLESHOOTING                                    *macos-spotify-troubleshooting*

Problem: "This plugin only works on macOS" ~
Solution: This plugin uses AppleScript which is macOS-only. It will not work
          on Linux or Windows.

Problem: "Spotify is not running" ~
Solution: Make sure the Spotify application is running. The plugin cannot
          control Spotify if it's not open.

Problem: Commands don't work or timeout ~
Solution: 
  1. Verify Spotify is running and responsive
  2. Try controlling Spotify manually to ensure it's not frozen
  3. Check Console.app for any AppleScript errors
  4. Ensure you have the latest version of Spotify

Problem: No notifications appearing ~
Solution: Check your configuration:
>lua
    require('macos-spotify').setup({
      notifications = true,  -- Make sure this is true
    })
<

Problem: Floating window not showing ~
Solution: 
  1. Try running `:SpotifyShowTrack` directly
  2. Check if there are any Lua errors with `:messages`
  3. Ensure Neovim 0.7+ is installed

==============================================================================
LICENSE                                                    *macos-spotify-license*

MIT License

Copyright (c) 2025 Oliver Hnat

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
